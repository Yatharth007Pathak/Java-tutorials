public class ab {

    public static void main(String[] args) {

        System.out.println("Hare Krishna");
        System.out.println(4 + 3);
        System.out.println("5 + 4");
    }
}

/*
.java contains java source code, which is high level human readable, used for development, file is editable
.class contains java bytecode, which is for consumption of JVM, used for execution, not meant to be edited
*/


/*
The difference between hello.java and hello.class lies in their roles and formats within the Java programming language:

hello.java:
This is a source file written in Java. 
It contains the Java code, which is human-readable and includes the class definitions, methods, and other Java constructs.
To create this file, we write the Java code in a text editor and save it with a .java extension.

hello.class:
This is a bytecode file generated by the Java compiler. 
When we compile hello.java using the javac command, the Java compiler converts the source code into bytecode, which is stored in a .class file.
The .class file contains bytecode that the Java Virtual Machine (JVM) can execute. 
It is not human-readable and is intended to be run by the JVM on any platform that supports Java.

In summary, hello.java is the source code, while hello.class is the compiled bytecode that the JVM uses to run the program.
*/


/*
JDK:- software development kit required to develop java applications
includes the JRE, an interpreter/loader(java), a compiler(javac), a doc generator(javadoc), and other tools needed for java development
JDK is a superset of JRE

JRE:- part of the JDK but ca nbe downloaded separately
provides the libraries, the JVM, and other components to run applications
does not have tools and utilities for developers like compilers o debuggers

JVM:- part of JRE and responsible for executing the bytecode
ensures java's write-once-run-anywhere capability
not platform independent, a different JVM is needed for each type of OS
*/

/*
Here's a line-by-line explanation of the code:

public class ab {
This line declares a public class named ab. 
In Java, the class is a container for related code and public means this class can be accessed from other classes.

public static void main(String[] args) {
This line defines the main method, which is the entry point for any Java application. 
public allows the method to be accessed from outside the class, 
static means the method belongs to the class rather than instances of the class, 
void indicates that the method does not return any value, 
String[] args is an array of String objects that can be used to pass command-line arguments.

System.out.println("Hare Krishna");
This line prints the string "Hare Krishna" to the console. 
System.out refers to the standard output stream, and println prints the specified text followed by a new line.

System.out.println(4 + 3);
This line prints the result of the expression 4 + 3 to the console. Since 4 + 3 is an arithmetic operation, it evaluates to 7,
so 7 will be printed followed by a new line.

System.out.println("5 + 4");
This line prints the string "5 + 4" to the console. Unlike the previous line, 
this is a string literal and not an arithmetic expression, so "5 + 4" will be printed exactly as it is.

}
This closing brace marks the end of the main method.

}
This closing brace marks the end of the ab class.
*/