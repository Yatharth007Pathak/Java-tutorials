public class ah {

    public static void main(String[] args) {

        int number = 10;          // primitive type
        if (number > 0) {         // control flow
            System.out.println("Number is positive");
        } else {
            System.out.println("Number is non-positive");
        }
        
        // Loop
        for (int i = 0; i < number; i++) {
            System.out.print(i + " ");
        }
    }
}



/*
In Java, keywords are reserved words that have a predefined meaning in the language. 
They cannot be used as identifiers (names for variables, methods, classes, etc.). Here is a list of 50 the keywords in Java:

Access Modifiers
private: Access level is only within the class.
protected: Access level is within the package and subclasses.
public: Access level is everywhere.

Class, Method, and Variable Modifiers
abstract: Indicates that a class cannot be instantiated or a method must be implemented by a subclass.
class: Defines a class.
extends: Indicates that a class is inheriting from a superclass.
final: Defines an entity that cannot be changed or inherited.
implements: Indicates that a class is implementing an interface.
interface: Defines an interface.
native: Indicates that a method is implemented in native code using JNI (Java Native Interface).
new: Creates new objects.
static: Indicates that a field or method belongs to the class rather than instances of the class.
strictfp: Used to restrict floating-point calculations to ensure portability.
synchronized: Used in multithreading to control access to a method or block.
transient: Prevents serialization of fields.
volatile: Indicates that a field may be modified by multiple threads.

Control Flow
break: Exits from the loop or switch statement.
case: Defines a case in a switch statement.
continue: Skips the current iteration of a loop and proceeds to the next iteration.
default: Specifies the default block of code in a switch statement.
do: Used in do-while loops.
else: Specifies a block of code to be executed if the condition in the if statement is false.
for: Used to start a for loop.
if: Used to start an if statement.
instanceof: Tests whether an object is an instance of a specific class or interface.
return: Exits from the current method and optionally returns a value.
switch: Starts a switch statement.
while: Starts a while loop.

Error Handling
assert: Used for debugging purposes to make an assertion.
catch: Catches exceptions generated by try statements.
throw: Used to explicitly throw an exception.
throws: Declares the exceptions that a method can throw.
try: Starts a block of code that will be tested for exceptions.

Primitive Types
boolean: Defines a boolean variable.
byte: Defines a byte variable.
char: Defines a character variable.
double: Defines a double-precision floating-point variable.
float: Defines a single-precision floating-point variable.
int: Defines an integer variable.
long: Defines a long integer variable.
short: Defines a short integer variable.
void: Specifies that a method does not return a value.

Others
const: Not used (reserved for future use).
goto: Not used (reserved for future use).
enum: Defines a set of named constants.
import: Imports other Java packages or classes.
package: Defines a package.
super: Refers to the superclass (parent) of the current object.
this: Refers to the current instance of a class.
null: A literal that represents a null reference. 
*/

/*
Here's a line-by-line explanation of the code:

public class ah {
This line declares a public class named ah. In Java, this class serves as a container for the code, 
and public means it is accessible from other classes.

public static void main(String[] args) {
This line defines the main method, which is the entry point for the Java application. 
public allows the method to be called from outside the class, static means the method belongs to the class rather than an instance, 
void indicates the method does not return a value, and String[] args is an array of String objects used for command-line arguments.

int number = 10;
This line declares an int variable named number and initializes it with the value 10. The int type is used for integer values.

// primitive type
This is a comment indicating that the number variable is of a primitive data type.

if (number > 0) {
This line starts an if statement to evaluate whether the number is greater than 0. 
If the condition is true, the code inside the if block will be executed.

System.out.println("Number is positive");
This line prints "Number is positive" to the console if the if condition (number > 0) is true.

} else {
This line starts the else block, which will be executed if the if condition is false.

System.out.println("Number is non-positive");
This line prints "Number is non-positive" to the console if the if condition is false (i.e., if number is 0 or less).

}
This closing brace marks the end of the if-else block.

// Loop
This is a comment indicating that the following code will demonstrate a loop.

for (int i = 0; i < number; i++) {
This line starts a for loop that initializes an int variable i to 0 and runs the loop while i is less than number (which is 10). 
The i++ expression increments i by 1 after each iteration.

System.out.print(i + " ");
This line prints the value of i followed by a space on the same line for each iteration of the loop. 
This will output the values from 0 to 9 on a single line.

}
This closing brace marks the end of the for loop.

}
This closing brace marks the end of the main method.

}
This closing brace marks the end of the ah class.
*/